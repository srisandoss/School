/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5e5d471e52a8e9561a0d35d2
*
* You will get 10% discount for each one of your friends
* 
*/
import React, { Component } from "react";
import { StyleSheet } from "react-native";
import {
  Header,
  Title,
  Container,
  Content,
  Body,
  Button,
  Text,
  Icon,
  Right,
  Left,
  Form,
  ListItem,
  Item,
  Label,
  Input,
  DatePicker,
} from "native-base";
import SecurityService from "../security/SecurityService";

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Custom Actions


// START IMPORT ACTIONS
import StudentActions from "../redux/actions/StudentActions";
import TeacherActions from "../redux/actions/TeacherActions";
import EventsActions from "../redux/actions/EventsActions";

// END IMPORT ACTIONS

/** APIs

* actionsStudent.create
*	@description CRUD ACTION create
*
* actionsStudent.update
*	@description CRUD ACTION update
*	@param ObjectId id - Id
*
* actionsStudent.get
*	@description CRUD ACTION get
*	@returns Student
*
* actionsTeacher.findBy_student
*	@description CRUD ACTION findBy_student
*	@param Objectid key - Id of model to search for
*
* actionsEvents.findBy_student
*	@description CRUD ACTION findBy_student
*	@param Objectid key - Id of model to search for
*

**/


class StudentEdit extends Component {
  
  // Init student
  constructor(props) {
    super(props);
    this.state = {
      student: {},
      authorized: false
    };
  }

  // Load data on start
  componentWillMount() {

    this.props.navigation.addListener("willFocus", async () => { 
      // Check security
      if (await SecurityService.isAuth([  ])) {
        this.setState({ authorized: true });
      } else {
        this.props.navigation.navigate("Login", {
          showError: "Not authorized"
        });
        return;
      }


      // Load data
      const itemId = this.props.navigation.getParam("id", "new");
      if (itemId !== "new") {
        this.props.actionsStudent.loadStudent(itemId);
      } else {
        this.setState({
          student: {}
        });
      }
      
    });
  }

  // Clear reducer
  componentWillUnmount() {
    this.setState({
      student: {}
    });
    this.props.actionsStudent.reset();
  }

  // Insert props student in state
  componentWillReceiveProps(props) {
    this.setState({
      student: props.student
    });
  }

  // Save data
  save() {
    // Validation
    let errors = {};
    
    if (!this.state.student.dob || this.state.student.dob.trim() === "") {
      errors.dob = true;
    }
    
    if (!this.state.student.fullName || this.state.student.fullName.trim() === "") {
      errors.fullName = true;
    }
    

    this.setState({ errors: errors });
    if (Object.keys(errors).length > 0) {
      return;
    }

    // Save
    if (this.state.student._id) {
      // Edit
      this.props.actionsStudent.saveStudent(this.state.student).then(data => {
        this.props.navigation.navigate("StudentList");
      });
    } else {
      // Create
      this.props.actionsStudent.createStudent(this.state.student).then(data => {
        this.props.navigation.navigate("StudentList");
      });
    }
  }

  // Show content
  render() { 

    // Check security
    if (!this.state.authorized) {
      return null;
    }

    return (
      <Container>
        <Header>
          <Left>
            <Button
            transparent
            onPress={() => this.props.navigation.goBack()}
            >
              <Icon name="arrow-back" />
            </Button>
          </Left>
          <Body>
            <Title>Detail Student</Title>
          </Body>
          <Right>
            <Button transparent onPress={() => this.save()}>
              <Text>Save</Text>
            </Button>
          </Right>
        </Header>
        <Content>
          <Form>
            
            <Item floatingLabel>
              <Label>
                AadharNo
              </Label>
              <Input
                onChangeText={value =>
                  this.setState(Object.assign(this.state.student, { aadharNo: value }))
                }
                value={this.state.student.aadharNo && this.state.student.aadharNo.toString()}
              />
            </Item>
          
            
            <Item floatingLabel>
              <Label>
                Address
              </Label>
              <Input
                onChangeText={value =>
                  this.setState(Object.assign(this.state.student, { address: value }))
                }
                value={this.state.student.address && this.state.student.address.toString()}
              />
            </Item>
          
            
            <Item floatingLabel>
              <Label>
                Allergy
              </Label>
              <Input
                onChangeText={value =>
                  this.setState(Object.assign(this.state.student, { allergy: value }))
                }
                value={this.state.student.allergy && this.state.student.allergy.toString()}
              />
            </Item>
          
            
            <Item floatingLabel>
              <Label>
                BloodGroup
              </Label>
              <Input
                onChangeText={value =>
                  this.setState(Object.assign(this.state.student, { bloodGroup: value }))
                }
                value={this.state.student.bloodGroup && this.state.student.bloodGroup.toString()}
              />
            </Item>
          
            <Item stackedLabel {...(this.state.errors && this.state.errors.dob === true ? { style: styles.validatorItem } : {})}>
              <Label
                {...(this.state.errors && this.state.errors.dob === true ? { style: styles.validatorLabel } : {})}>
                Dob *
              </Label>
              <DatePicker
                placeHolderText="Select a date"
                defaultDate={this.state.student.dob }
                onDateChange={value => 
                  this.setState(Object.assign(this.state.student, { dob: value }))
                }
              />
            </Item>
            {this.state.errors && this.state.errors.dob === true && (
              <Text style={styles.validatorMessage}>Value is required</Text>
            )}
            
            
            <Item floatingLabel>
              <Label>
                FatherMobileNo
              </Label>
              <Input
                onChangeText={value =>
                  this.setState(Object.assign(this.state.student, { fatherMobileNo: value }))
                }
                value={this.state.student.fatherMobileNo && this.state.student.fatherMobileNo.toString()}
              />
            </Item>
          
            
            <Item floatingLabel>
              <Label>
                FatherName
              </Label>
              <Input
                onChangeText={value =>
                  this.setState(Object.assign(this.state.student, { fatherName: value }))
                }
                value={this.state.student.fatherName && this.state.student.fatherName.toString()}
              />
            </Item>
          
            
            <Item floatingLabel {...(this.state.errors && this.state.errors.fullName === true ? { style: styles.validatorItem } : {})}>
              <Label
                {...(this.state.errors && this.state.errors.fullName === true ? { style: styles.validatorLabel } : {})}>
                FullName *
              </Label>
              <Input
                onChangeText={value =>
                  this.setState(Object.assign(this.state.student, { fullName: value }))
                }
                value={this.state.student.fullName && this.state.student.fullName.toString()}
              />
            </Item>
            {this.state.errors && this.state.errors.fullName === true && (
              <Text style={styles.validatorMessage}>Value is required</Text>
            )}
          
            
            <Item floatingLabel>
              <Label>
                MotherMobileNo
              </Label>
              <Input
                onChangeText={value =>
                  this.setState(Object.assign(this.state.student, { motherMobileNo: value }))
                }
                value={this.state.student.motherMobileNo && this.state.student.motherMobileNo.toString()}
              />
            </Item>
          
            
            <Item floatingLabel>
              <Label>
                MotherName
              </Label>
              <Input
                onChangeText={value =>
                  this.setState(Object.assign(this.state.student, { motherName: value }))
                }
                value={this.state.student.motherName && this.state.student.motherName.toString()}
              />
            </Item>
          



          </Form>
        </Content>
      </Container>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { 
    actionsStudent: bindActionCreators(StudentActions, dispatch),
  };
};

// Validate types
StudentEdit.propTypes = { 
  actionsStudent: PropTypes.object.isRequired,
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    student: state.StudentEditReducer.student
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(StudentEdit);

const styles = StyleSheet.create({
  validatorItem: { borderColor: "red" },
  validatorLabel: { color: "red" },
  validatorMessage: { color: "red", marginLeft: 15, marginTop: 5 }
});
